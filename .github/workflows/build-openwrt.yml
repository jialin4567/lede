# =================================================================================
#  GitHub Actions - 编译 OpenWrt (高效缓存 & 稳定性优化版)
#
#  说明:
#  1. 解决了因内存耗尽导致的 "Runner lost communication" 错误。
#  2. 完全启用了 ccache 缓存，二次编译速度提升巨大。
#  3. 增加了 Swap 空间作为稳定性双保险。
# =================================================================================

name: Build OpenWrt (Optimized)

on:
  workflow_dispatch:
    inputs:
      ssh_action:
        description: '在编译前通过 SSH 连接到 Runner (需要调试时填入 "true")'
        required: false
        default: 'false'

env:
  # OpenWrt 源码地址和分支
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  
  # 你的 OpenWrt 配置文件名
  CONFIG_FILE: lede.config
  
  # （可选）你的自定义脚本文件名
  DIY_PART1_SH: diy-part1.sh
  DIY_PART2_SH: diy-part2.sh
  
  # 上传到 Artifacts 的固件名称
  UPLOAD_FIRMWARE_NAME: OpenWrt_firmware
  
  # 时区
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出仓库代码 (Checkout)
      uses: actions/checkout@v4

    - name: 初始化编译环境 (Initialize build environment)
      run: |
        # 清理不必要的空间，为编译和缓存留出更多余地
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get update
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano quilt rsync scons subversion swig texinfo uglifyjs upx-ucl unzip vim \
        wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    # --- 新增：增加交换空间，防止编译过程中内存不足 ---
    - name: 增加 Swap 交换空间 (Increase Swap Space)
      run: |
        sudo fallocate -l 10G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        sudo swapon --show
        free -h

    - name: 克隆 OpenWrt 源码 (Clone OpenWrt source code)
      run: |
        git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt

    # --- 新增：配置和缓存 ccache，大幅提升二次编译速度 ---
    - name: 缓存 ccache (Cache ccache)
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ hashFiles('**/lede.config', '**/diy-part*.sh') }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    # --- 优化：将 dl 和 staging_dir 缓存分开，更灵活 ---
    - name: 缓存 OpenWrt 下载目录 (Cache OpenWrt dl directory)
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-dl-${{ env.REPO_BRANCH }}

    - name: 加载自定义配置 (Load custom configuration)
      run: |
        if [ ! -f "${{ env.CONFIG_FILE }}" ]; then
          echo "错误: 配置文件 ${{ env.CONFIG_FILE }} 未找到!"
          exit 1
        fi
        mv ${{ env.CONFIG_FILE }} openwrt/.config
        
        if [ -f ${{ env.DIY_PART1_SH }} ]; then
          chmod +x ${{ env.DIY_PART1_SH }}
          (cd openwrt && ../${{ env.DIY_PART1_SH }})
        fi

    - name: 更新并安装 Feeds (Update and install feeds)
      run: |
        cd openwrt
        # 添加常用的 passwall 依赖
        echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main" >> feeds.conf.default
        echo "src-git passwall2 https://github.com/xiaorouji/openwrt-passwall2.git;main" >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 执行自定义脚本 Part 2 (Run custom script Part 2)
      run: |
        if [ -f ${{ env.DIY_PART2_SH }} ]; then
          chmod +x ${{ env.DIY_PART2_SH }}
          (cd openwrt && ../${{ env.DIY_PART2_SH }})
        fi
    
    # --- 新增：启用 ccache ---
    - name: 启用 ccache (Enable ccache)
      run: |
        cd openwrt
        echo "export USE_CCACHE=1" >> $GITHUB_ENV
        ccache -M 5G # 设置ccache最大缓存大小
        ccache -s # 显示 ccache 状态

    - name: 生成最终配置文件 (Generate final .config)
      run: |
        cd openwrt
        make defconfig

    - name: SSH 连接到 Runner (SSH connection to runner for debugging)
      if: ${{ github.event.inputs.ssh_action == 'true' }}
      uses: P3TERX/ssh2actions@v1.0.0
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    - name: 下载软件包 (Download packages)
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # --- 核心修改：使用单线程编译防止内存溢出 ---
    - name: 编译固件 (Compile the firmware)
      id: compile
      run: |
        cd openwrt
        echo "使用单线程编译以防止内存耗尽..."
        make -j1 V=s
        
        echo "::set-output name=status::success"
        
        FIRMWARE_PATH=$(find bin/targets -type f -name "*.img.gz" | head -n 1)
        if [ -z "$FIRMWARE_PATH" ]; then
          echo "错误: 未找到编译好的固件文件！"
          exit 1
        fi
        echo "FIRMWARE_PATH=${FIRMWARE_PATH}" >> $GITHUB_ENV
        echo "找到固件: ${FIRMWARE_PATH}"

    - name: 上传固件到 Artifacts (Upload firmware to artifacts)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.UPLOAD_FIRMWARE_NAME }}
        path: ${{ env.FIRMWARE_PATH }}
